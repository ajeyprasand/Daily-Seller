# -*- coding: utf-8 -*-
"""product.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Fp2DKInUIDKyuT7ExtGXnGuARHH4Eef
"""

from abc import ABC, abstractmethod
import copy
class Product(ABC):
  product_registry=set()
  def __init__(self, typeProduct, counter, name, price, available=True):
    try:
      price=float(price)
    except ValueError:
      raise ValueError("Invalid price. Please enter a valid numeric value.")
    if price<0:
      raise ValueError("Invalid price. The value of price cannot be negative.")
    if available==False:
      #raise ValueError(f" Oops!! {name} not available.")
      return
    if (name+str(price)) in [(p.name +str(p.price)) for p in Product.product_registry]:
      #raise ValueError(f"Oops!! Product already exsists.")
      return
    self.id= typeProduct + str(counter)
    self.name=name
    self.price=price
    self.available=available
    Product.product_registry.add(self)

  def get_id(self):
    return self.id

  def get_name(self):
    return self.name

  def get_price(self):
    return self.price

  @abstractmethod
  def clone(self):
    pass

  @classmethod
  def display_created_products(cls):
    if cls.product_registry:
      print("Products Listed Currently:")
      for product in cls.product_registry:
        print(f"Id: {product.get_id()}, Name: {product.get_name()}, Price: Rs.{product.get_price()}")
      return True
    else:
      print("----System Offline----")
      return False

class Electronic_Product(Product):
  counter=1
  def __init__(self, name, price, available=True):
    super().__init__('E',Electronic_Product.counter,name,price,available)
    Electronic_Product.counter+=1

  def clone(self):
    return copy.copy(self)

class Medicinal_Product(Product):
  counter=1
  def __init__(self, name, price, available=True):
    super().__init__('H',Medicinal_Product.counter,name,price,available)
    Medicinal_Product.counter+=1

  def clone(self):
    return copy.copy(self)

class Textile_Product(Product):
  counter=1
  def __init__(self, name, price, available=True):
    super().__init__('T',Textile_Product.counter,name,price,available)
    Textile_Product.counter+=1

  def clone(self):
    return copy.copy(self)

